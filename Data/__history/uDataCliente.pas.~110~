Unit uDataCliente;

Interface

Uses
  SysUtils, Classes, DB, ADODB, SqlServerConnection, Dialogs, uCliente, Contnrs;

Type
  TDataCliente = Class(TDataModule)
    quBuscarCliente: TADOQuery;
    quImportar: TADOQuery;
  Private
    { Private declarations }
    Cliente: TModelCliente;
  Public
    { Public declarations }
    Function buscarCliente(): TADOQuery;
    Function buscarClienteByNome(nome: String): TADOQuery;
    Procedure excluirCliente(id: integer);
    Procedure incluirCliente(ClienteIn: TModelCliente);
    Procedure incluirListaCliente(lista: TObjectList);
    Procedure alterarCliente(ClienteIn: TModelCliente);
  End;

Var
  DataCliente: TDataCliente;

Implementation

{$R *.dfm}

{ TDataCliente }

Procedure TDataCliente.alterarCliente(ClienteIn: TModelCliente);
Var
  txtSql: String;
Begin
  Try
    With quBuscarCliente Do
    Begin
      txtSql := 'UPDATE clientes ' +
        'SET ' +
        ' Id         = :id ' +
        ',nome       = :nome ' +
        ',telefone   = :telefone';

      SQL.Text := txtSql;
      Prepared := True;

      Parameters.ParamByName('id').DataType := ftInteger;
      Parameters.ParamByName('id').Value := ClienteIn.Id;
      Parameters.ParamByName('nome').DataType := ftString;
      Parameters.ParamByName('nome').Value := ClienteIn.Nome;
      Parameters.ParamByName('telefone').DataType := ftString;
      Parameters.ParamByName('telefone').Value := ClienteIn.Telefone;
      ExecSQL;
    End;
  Finally
  End;
End;

function TDataCliente.buscarCliente: TADOQuery;
var
  txtSql: string;
begin
  Result := nil;
  quBuscarCliente.Connection.BeginTrans;
  try
    with quBuscarCliente do
    begin
      Close;
      SQL.Clear;
      txtSql := 'SELECT Id, nome, telefone ' +
                'FROM clientes';
      SQL.Text := txtSql;
      Prepared := True;
      Open;
      Result := quBuscarCliente;
    end;
    quBuscarCliente.Connection.CommitTrans;
  except
    on E: Exception do
    begin
      quBuscarCliente.Connection.RollbackTrans;
      raise; // Re-raise the exception after rollback
    end;
  end;
end;

function TDataCliente.buscarClienteByNome(nome: string): TADOQuery;
begin
  Result := nil;
  quBuscarCliente.Connection.BeginTrans;
  try
    with quBuscarCliente do
    begin
      Close;
      SQL.Text := 'SELECT id, nome, telefone ' +
                  'FROM clientes ' +
                  'WHERE nome LIKE :nome';
      Parameters.ParamByName('nome').DataType := ftString;
      Parameters.ParamByName('nome').Value := '%' + nome + '%';

      Prepared := True;

      Open;
      Result := quBuscarCliente;
    end;
    quBuscarCliente.Connection.CommitTrans;
  except
    on E: Exception do
    begin
      quBuscarCliente.Connection.RollbackTrans;
      raise; // Re-raise the exception after rollback
    end;
  end;
end;

Procedure TDataCliente.excluirCliente(id: integer);
Var
  txtSql: String;
Begin
  Try
    With quBuscarCliente Do
    Begin
      Close;
      SQL.Clear;
      txtSql := 'DELETE ' +
        'FROM clientes ' +
        'WHERE Id = :id';
      SQL.Add(txtSql);
      Parameters.ParamByName('id').DataType := ftInteger;
      Parameters.ParamByName('id').Value := id;
      ExecSQL;
    End;
  Finally
    ShowMessage('Registro excluído com sucesso!');
  End;
End;

Procedure TDataCliente.incluirCliente(ClienteIn: TModelCliente);
Var
  txtSql: String;
Begin
  Try
    With quBuscarCliente Do
    Begin
      Close;
      SQL.Clear;
      txtSql := 'INSERT INTO clientes ' +
        '(nome, telefone) ' +
        'VALUES' +
        '(:nome, :telefone)';
      SQL.Add(txtSql);
      Parameters.ParamByName('nome').DataType := ftString;
      Parameters.ParamByName('nome').Value := ClienteIn.Nome;
      Parameters.ParamByName('telefone').DataType := ftString;
      Parameters.ParamByName('telefone').Value := ClienteIn.Telefone;
      ExecSQL;
    End;
  Finally
    ShowMessage('Registro inserido com sucesso!');
  End;
End;

Procedure TDataCliente.incluirListaCliente(lista: TObjectList);
Var
  txtSQL: String;
  i: integer;
Begin
  Cliente := TModelCliente.Create;
  quImportar.Connection.BeginTrans;
  Try
    With quImportar Do
    Begin
      Close;
      SQL.Clear;
      For i := 0 To lista.Count - 1 Do
      Begin
        Cliente := TModelCliente(lista[i]);

        txtSQL := 'INSERT INTO clientes (nome, telefone) ' +
          'VALUES (:nome, :telefone)';
        SQL.Add(txtSQL);

        Parameters.ParamByName('nome').DataType := ftString;
        Parameters.ParamByName('nome').Value := Cliente.Nome;
        Parameters.ParamByName('telefone').DataType := ftString;
        Parameters.ParamByName('telefone').Value := Cliente.Telefone;

        ExecSql;
        SQL.Clear;
        Close;
      End;
    End;
  Finally
    Begin
      Cliente.Free;
    End;
  End;

  quImportar.Connection.CommitTrans;
End;

End.


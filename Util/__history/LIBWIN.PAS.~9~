unit Libwin;

interface

uses
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, Mask, FileCtrl, ExtCtrls, IniFiles,
  DB, DBTables, Buttons, DBClient, SHDocVw, ActiveX,
  Math, Variants, ComObj, Shellapi, Winsock, Grids, DBGrids,
  IdHashMessageDigest, StrUtils, ADODB, IdCoderMIME;

Function trocaVirgula(Valor: string): String;
procedure imprimirPlanilha(instrucaoSQl: TADOQuery; title, tipo: String);

var
  RetornoOK:boolean;
  OpenOffice: Variant;

const

   C1 = 52845;
   C2 = 22719;

   GUIA_IMPORTADA               = 0;
   GUIA_GERADA_BB               = 1;
   GUIA_AUTENTICADA_BB          = 2;
   GUIA_REJEITADA_BB            = 3;
   GUIA_IMPRESSA                = 4;
   GUIA_NAO_RECEBE_AUTENTICACAO = 5;

   { Codigos de Controle  }

   GERA_REMESSA_PARA_COBRANCA       = 10;
   NAO_GERA_REMESSA_PARA_COBRANCA   = 20;
   ALTERACAO_SEM_MULTA_COM_COBRANCA = 30;
   ALTERACAO_SEM_MULTA_SEM_COBRANCA = 31;
   ALTERACAO_COM_MULTA_COM_COBRANCA = 40;
   ALTERACAO_COM_MULTA_SEM_COBRANCA = 41;
   CARTEIRA_18_SEM_REMESSA_COBRANCA = 21;

   CARTEIRA_18_ALTERACAO_SEM_MULTA_SEM_REMESSA_COBRANCA = 32;
   CARTEIRA_18_ALTERACAO_COM_MULTA_SEM_REMESSA_COBRANCA = 42;

   DARF_DE_MULTA_TIPO1 = 50;
   DARF_DE_MULTA_TIPO2 = 51;
   DARF_DE_ANVISA      = 54;

   SEM_AUTENTICACAO_SEM_COBRANCA = 52;
   SEM_AUTENTICACAO_COM_COBRANCA = 53;
   GNRE_SEM_DARF_SEM_COBRANCA    = 60;

   DARF_REJEITADO = 55;
   GNRE_REJEITADO = 61;
   DARJ_REJEITADO = 71;

   { Constante para evolução de versão }

   VERSAO_DO_APLICATIVO  = 'COURIER SAT   v. 2.32.51';
   ARQUIVO_INI           = 'COURIERSAT.INI';
   DIRETORIO_BASE        = '\ARQUIVOS\';
   CONECTA               = 'CONECTABD.INI';
   TRIBUTO_DARJ          = 221;

   { Constante para cocatenação de PDF }

   GS_ARG_ENCODING_LOCAL = 0;
   GS_ARG_ENCODING_UTF8 = 0;
   e_Quit = -990;

type
  Targvs = array of pansichar;

    TGSAPIrevision = packed record
      product: PChar;
      copyright: PChar;
      revision: longint;
      revisiondat: longint;
    end;

    PGSAPIrevision = ^TGSAPIrevision;
    Pgs_main_instance = Pointer;
    PPChar = array of PChar;

implementation

uses Windows, TLHelp32, PsAPI, xmldom, XMLIntf, msxmldom, XMLDoc;

function gsapi_new_instance(pinstance: Pgs_main_instance;
  caller_handle: Pointer): Integer; stdcall; external 'gsdll32.dll';
function gsapi_init_with_args(pinstance: Pgs_main_instance; argc: Integer;
  argv: PPChar): Integer; stdcall; external 'gsdll32.dll';
function gsapi_exit(pinstance: Pgs_main_instance): Integer; stdcall;
  external 'gsdll32.dll';
procedure gsapi_delete_instance(pinstance: Pgs_main_instance); stdcall;
  external 'gsdll32.dll';
function gsapi_set_arg_encoding(pinstance: Pgs_main_instance; ENCODING: Integer)
  : Integer; stdcall; external 'gsdll32.dll';

procedure imprimirPlanilha(instrucaoSQl: TADOQuery; title, tipo: String);
var
  Linha, Coluna: Integer;
  ValorCampo: String;
  Celula: Variant;
  MSExcel, ExcelBook, ExcelSheet: OleVariant;
begin
  MSExcel    := CreateOLEObject( 'Excel.Application' ); // Cria uma aplicação do Excel
  ExcelBook  := MSExcel.WorkBooks.Add;                  // Adiciona uma pasta na planilha
  ExcelSheet := ExcelBook.WorkSheets.Add;
  ExcelSheet.Range['A1','H1'].Merge(EmptyParam);
  ExcelSheet.Cells[ 1,1 ].Font.Size      := 12;
  ExcelSheet.Cells[ 1,1 ].Interior.Color := $00ffcf9c;
  ExcelSheet.Cells[ 1,1 ].Font.Bold      := True;
  Celula       := ExcelSheet.Cells[ 1,1 ];
  Celula.Value := title;
  Linha := 3; // Dados são inseridos a partir desta linha
  Screen.Cursor := crHourGlass;

  instrucaoSQl.Open;

{gera a segunda linha com o nome das colunas do banco de dados}
  if (instrucaoSQl.RecordCount > 0) then begin
    for Coluna := 1 to instrucaoSQL.FieldCount do
    begin
      ValorCampo := instrucaoSQL.Fields[coluna - 1].DisplayLabel;
      MSExcel.cells[2,coluna] := ValorCampo; // Nome das colunas
      MSExcel.Cells[2,coluna].Font.Color := clWhite;
      MSExcel.Cells[2,coluna].Font.Bold := True;
      MSExcel.Cells[2,coluna].Interior.Color := clBlue;
    end;

{formata as células com o tipo e regras de acordo com o tipo de dados do banco de dados}
    For Coluna := 0 to (instrucaoSQl.FieldCount - 1) do
    begin
      MSExcel.Cells[Linha,Coluna + 1] := instrucaoSQl.Fields[Coluna].DisplayLabel;
      Case instrucaoSQl.Fields[Coluna].DataType Of
        ftDate    : MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := 'dd/mm/aaaa';
        ftDateTime: MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := 'dd/mm/aaaa';
        ftString  : MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := '@';
        ftCurrency: MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := '###0,00';
        ftFloat   : MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := '###0';
        ftBCD     : MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := '@';
        ftSmallint: MSExcel.Columns.Columns[ Coluna + 1 ].NumberFormat := '###0,00';
      end;
    end;

    instrucaoSQl.First;
    instrucaoSQl.DisableControls;
    try
      while not instrucaoSQl.Eof do
      begin
        try
          for Coluna := 0 to (instrucaoSQL.FieldCount - 1) do  begin
            if not VarIsEmpty(instrucaoSQl.Fields[coluna].Value) then
              MSExcel.Cells[Linha,Coluna + 1] := Trim(VarToStr(instrucaoSQl.Fields[Coluna].Value))
            else
              MSExcel.Cells[Linha,Coluna + 1] := instrucaoSQl.Fields[Coluna].Value;

            if tipo = 'Voo' then begin
               if (coluna = 19) or (coluna = 21) or (coluna = 24) or (coluna = 26) then
                  MSExcel.Cells[Linha,Coluna + 1] := trocaVirgula(instrucaoSQl.Fields[coluna].Value);
            end;

            if Trim(tipo) = 'Tratamento' then begin
               if (coluna = 4) and (Trim(instrucaoSQl.Fields[coluna].Value) <> EmptyStr) then
                  MSExcel.Cells[Linha,Coluna + 1] := 'TC - ' + Trim(instrucaoSQl.Fields[coluna].Value);
            end;

            if Trim(tipo) = 'Total' then begin
               if coluna = 4 then
                  MSExcel.Cells[Linha,Coluna + 1] := FloatToStr(StrToFloat(instrucaoSQl.Fields[coluna].Value) * 2.2046);
            end;

          end;
          instrucaoSQl.Next;
          Inc(Linha);
        finally
        end;
      end;
    finally
      instrucaoSQl.EnableControls;
    end;
  end;
  MSExcel.Columns.AutoFit;
  MSExcel.Visible := True;
  Screen.Cursor := crDefault;
end;

Function trocaVirgula(Valor: string): String;
begin
  if (Trim(valor) <> EmptyStr) and
     (Trim(valor) <> '0')      then
     Result := trim(StringReplace(Valor,',','.',[rfReplaceall]))
  else
     Result := '0.00';
end;

end.




